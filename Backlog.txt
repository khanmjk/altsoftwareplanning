Created MVP backlog Fri 26 April 2025
--------------------------------------

----
DONE
----
A lot has been done
[Done] MVP shows functional system view, org chart, engineer list, manage year plan and tune capacity constraints pages
[Done] Revisit the Yearly Planning page (planningView / generatePlanningTable). The goal will be to introduce a new control (like a toggle switch) labelled "Apply Capacity Constraints". When this is activated, the planning table's ATL/BTL calculation will switch from using the Gross capacity (Team BIS, Effective BIS, or Funded HC) to using the calculated Net Project SDE Years (Gross minus all the sinks we configured) for the corresponding scenario. This will give a much more realistic view of what can actually be delivered Above The Line.
[Done] Resource Forecasting - Incorporate the resource forecasting tool in the main app
[Done] In system overview, only show the service dependencies table when the service dependency visualisation is selected from the carousel	
[Done] Documentation - Generate comprehensive project wiki, readme and instructions about the tool
[Done] Landing home page - include a content window that shows the documentation about the tool
[Done] Refactored single index.html to multiple files by features, major refactor
[Done] Refresh the MVP UX to look like a modernized webapp
[Done] [Feature] No ability to add new engineers to team (regression)

------------
IN PROGRESS
------------
- [Feature] Make the Engineer List editable as well

------
TO DO
------
UX
-- 

Data Model
-- Inspect the data model structure and enhance the data model for future backlog items, create an easy way to extend the data structure without having to change a lot of existing code - so maybe add an attribute that allows for future additions to the model (extensible data structure)
-- Enhance the team member structure by supporting AI SWEs to supplement the team. These AI SWE (software engineers) can have different skill levels too, similar to human: Intern, Junior, Intermediate, Senior. They could be added from a pool of AI agents
for away team work, or can be part of a team like any other human engineer

Year Planning
-- Add ROI (Return on investment - some protected initiatives will override ROI) for prioritising initiatives, Target Due/Dates, Delivery Quarter columns to year plan table (updates to data model needed)
-- Consider adding concept of flat headcount or incremental headcount to planning table?
-- View planning by teams - for individual manager team planning. Allow managers to tune their teams estimates which will update the data model, year plan page uses latest changes)
-- Add versioning when saving plans (up to 5 previous versions) - need to update data model structure
-- Add ability to export the plan to CSV or Excel

Manage Roadmap & Backlog
-- Similar to the year planning page, but focused on roadmap / backlog management (does not need to show ATL/BTL logic), just an interactive table to pull the latest backlog of initiatives, ability to add and remove initiatives. The Year plan and Roadmap must share the same data model (year plan shows more details / attributes than the roadmap)
-- Generate roadmap table view (by quarter), should be interactive to filter by org, team
-- Add ability to import a backlog from an excel file
-- The backlog items can have 1..many initiatives
-- Initiatives can be associated with 1..many themes or tags that are linked to a business goal / strategy, like Revenue, Cost Optimization, Engineering Excellence, UX/Usability, Accessibility, Security, Product Feature enhancements
-- It must be possible to generate a view of business objectives and strategies from the backlog
-- It must be possible to generate a 3 year plan (3YP) view of the roadmap, something like Current Year, Next Year, future
-- It must be possible to show a visual representation of the initiatives by theme so the senior engineering or product leader can gauge the distribution of investments by theme or tags
-- It must be possible to generate a view of completed goals, initiatives or work packages
-- It must be possible to generate a roadmap view per team for software managers to focus on their team or org-specific commitments
-- It must be possible to display a graph visualization (similar to system visualizations) of service impact and relations to initiatives and work package dependencies


Team Editing
-- We support away team only from an incoming perspective (i.e. help provided to the team), but we could also consider concept of outgoing away team (I.e. the team lends engineers to other teams)

Manage Detailed Planning
-- Concept of work packages
-- Data model planning updates
-- A plan is governed by 1...many goals
-- A goal is comprised on 1 ... many initiatives
--- A goal has an owner (person accountable for the goal delivery) - typically a product manager from the organisation
--- A goal can have a project manager assigned to own the planning and tracking
--- A goal can have a technical point of contact (POC), the lead engineer or SDM
-- An initiative can have 1.. many work packages
--- An initiative can have a project manager assigned
--- An initiative can have an owner (either the goal owner, or someone else) accountable for delivery
--- An initiatve can impact 1..many teams
--- An initiative can impact 1.. many services
-- A work package impacts 1.. many teams
--- A work package impacts 1.. many services
-- A team has 1..many tasks to deliver
--- Tasks can have 0..many dependencies on other tasks within the work package, or other work packages outside its work package
-- A work package has 1..many delivery statuses (Not Started, In Progress, Delivered)
-- A work package has 1 .. many phases [Requirements, Design, Implementation, Integration testing, Security Testing, UAT/E2E Testing, Deployed]
-- A work package has a planned delivery date and actual delivery date (to track plan versus actual)
-- A work package has total capacity metric (sum of all HC estimates per team associated with the work package)
-- A work package can have one owner (someone accountable for the work package delivery)
-- A work package can have 0..many dependencies on other work packages

AI enhancements
- Solve for dynamic input of API key to use AI features (ask the user to provide the name of their environment variable for the app to read local API key, not made public in the code or console log) (a local secure way of accessing user's API key. If the API key does not exist, no AI features exposed).
- Use AI to create a new system from a visual software architecture diagram
- Use AI conversational chatbot to set up a new system, edit, or interact with the data associated with existing systems
- Use AI to optimise the yearly planning
- Use AI to optimise detail planning
- Use AI to provide insights into the software system and overall engineering organisation

Bugs / Missing features
- [Bug] Apply consistent behaviour for displaying visualization graphs in caroussel - fix legends
- [UX] Use team identity instead of team name for "Owning Team" column in Service Dependencies table when Service Dependency Visualization is shown on the carousel
- [UX] Use consistent formatting for legends in the carousel (circles not blocks)
- [Feature] For all visualizations add a toggle button to show/hide platform components 
- [Feature] Add more default systems for demo purposes: Reference architectures for Android Stack, Chat GPT app, LLM system, etc.
- [Feature] Organization Overview - show a view of traditional org chart with blocks

==== Post MVP ===
UX enhancements
-- [Partially Done - needs rewrite port to modern framework like react] modernise the UX to a style of popular apps, maybe copy the AWS console UX styles?
-- OR get the AI to research the UX style for open project.org 
-- Add sign-in / auth functionality
-- Update data model to support organisations: An organisation has 1..many systems, etc.
-- Launch the app :-)
